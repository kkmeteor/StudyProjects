//
// ReportLevelExpandsType.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;


namespace UFIDA.U8.UAP.Services.ReportElements
{
    public class ReportLevelExpandsType : Altova.Xml.Node
	{
		#region Forward constructors
		public ReportLevelExpandsType() : base() { SetCollectionParents(); }
		public ReportLevelExpandsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ReportLevelExpandsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ReportLevelExpandsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "ReportLevelExpand"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "ReportLevelExpand", i);
				InternalAdjustPrefix(DOMNode, true);
				new ReportLevelExpandType(DOMNode).AdjustPrefix();
			}
		}


		#region ReportLevelExpand accessor methods
		public int GetReportLevelExpandMinCount()
		{
			return 1;
		}

		public int ReportLevelExpandMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetReportLevelExpandMaxCount()
		{
			return 1;
		}

		public int ReportLevelExpandMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetReportLevelExpandCount()
		{
			return DomChildCount(NodeType.Element, "", "ReportLevelExpand");
		}

		public int ReportLevelExpandCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ReportLevelExpand");
			}
		}

		public bool HasReportLevelExpand()
		{
			return HasDomChild(NodeType.Element, "", "ReportLevelExpand");
		}

		public ReportLevelExpandType GetReportLevelExpandAt(int index)
		{
			return new ReportLevelExpandType(GetDomChildAt(NodeType.Element, "", "ReportLevelExpand", index));
		}

		public XmlNode GetStartingReportLevelExpandCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ReportLevelExpand" );
		}

		public XmlNode GetAdvancedReportLevelExpandCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ReportLevelExpand", curNode );
		}

		public ReportLevelExpandType GetReportLevelExpandValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ReportLevelExpandType( curNode );
		}


		public ReportLevelExpandType GetReportLevelExpand()
		{
			return GetReportLevelExpandAt(0);
		}

		public ReportLevelExpandType ReportLevelExpand
		{
			get
			{
				return GetReportLevelExpandAt(0);
			}
		}

		public void RemoveReportLevelExpandAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ReportLevelExpand", index);
		}

		public void RemoveReportLevelExpand()
		{
			while (HasReportLevelExpand())
				RemoveReportLevelExpandAt(0);
		}

		public void AddReportLevelExpand(ReportLevelExpandType newValue)
		{
			AppendDomElement("", "ReportLevelExpand", newValue);
		}

		public void InsertReportLevelExpandAt(ReportLevelExpandType newValue, int index)
		{
			InsertDomElementAt("", "ReportLevelExpand", index, newValue);
		}

		public void ReplaceReportLevelExpandAt(ReportLevelExpandType newValue, int index)
		{
			ReplaceDomElementAt("", "ReportLevelExpand", index, newValue);
		}
		#endregion // ReportLevelExpand accessor methods

		#region ReportLevelExpand collection
        public ReportLevelExpandCollection	MyReportLevelExpands = new ReportLevelExpandCollection( );

        public class ReportLevelExpandCollection: IEnumerable
        {
            ReportLevelExpandsType parent;
            public ReportLevelExpandsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ReportLevelExpandEnumerator GetEnumerator() 
			{
				return new ReportLevelExpandEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ReportLevelExpandEnumerator: IEnumerator 
        {
			int nIndex;
			ReportLevelExpandsType parent;
			public ReportLevelExpandEnumerator(ReportLevelExpandsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ReportLevelExpandCount );
			}
			public ReportLevelExpandType  Current 
			{
				get 
				{
					return(parent.GetReportLevelExpandAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ReportLevelExpand collection

        private void SetCollectionParents()
        {
            MyReportLevelExpands.Parent = this; 
	}
}
}
