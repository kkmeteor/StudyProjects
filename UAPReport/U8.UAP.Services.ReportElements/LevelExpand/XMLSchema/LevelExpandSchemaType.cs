//
// LevelExpandSchemaType.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using UFIDA.U8.UAP.Services.ReportElements.Altova.Types;

namespace UFIDA.U8.UAP.Services.ReportElements
{
	public class LevelExpandSchemaType : Altova.Xml.Node
	{
		#region Forward constructors
		public LevelExpandSchemaType() : base() { SetCollectionParents(); }
		public LevelExpandSchemaType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LevelExpandSchemaType(XmlNode node) : base(node) { SetCollectionParents(); }
		public LevelExpandSchemaType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "DesignTimeExpandItems"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "DesignTimeExpandItems", i);
				InternalAdjustPrefix(DOMNode, true);
				new DesignTimeExpandItemsType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "ReportLevelExpands"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "ReportLevelExpands", i);
				InternalAdjustPrefix(DOMNode, true);
				new ReportLevelExpandsType(DOMNode).AdjustPrefix();
			}
		}


		#region DesignTimeExpandItems accessor methods
		public int GetDesignTimeExpandItemsMinCount()
		{
			return 1;
		}

		public int DesignTimeExpandItemsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDesignTimeExpandItemsMaxCount()
		{
			return 1;
		}

		public int DesignTimeExpandItemsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDesignTimeExpandItemsCount()
		{
			return DomChildCount(NodeType.Element, "", "DesignTimeExpandItems");
		}

		public int DesignTimeExpandItemsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "DesignTimeExpandItems");
			}
		}

		public bool HasDesignTimeExpandItems()
		{
			return HasDomChild(NodeType.Element, "", "DesignTimeExpandItems");
		}

		public DesignTimeExpandItemsType GetDesignTimeExpandItemsAt(int index)
		{
			return new DesignTimeExpandItemsType(GetDomChildAt(NodeType.Element, "", "DesignTimeExpandItems", index));
		}

		public XmlNode GetStartingDesignTimeExpandItemsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "DesignTimeExpandItems" );
		}

		public XmlNode GetAdvancedDesignTimeExpandItemsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "DesignTimeExpandItems", curNode );
		}

		public DesignTimeExpandItemsType GetDesignTimeExpandItemsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new DesignTimeExpandItemsType( curNode );
		}


		public DesignTimeExpandItemsType GetDesignTimeExpandItems()
		{
			return GetDesignTimeExpandItemsAt(0);
		}

		public DesignTimeExpandItemsType DesignTimeExpandItems
		{
			get
			{
				return GetDesignTimeExpandItemsAt(0);
			}
		}

		public void RemoveDesignTimeExpandItemsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "DesignTimeExpandItems", index);
		}

		public void RemoveDesignTimeExpandItems()
		{
			while (HasDesignTimeExpandItems())
				RemoveDesignTimeExpandItemsAt(0);
		}

		public void AddDesignTimeExpandItems(DesignTimeExpandItemsType newValue)
		{
			AppendDomElement("", "DesignTimeExpandItems", newValue);
		}

		public void InsertDesignTimeExpandItemsAt(DesignTimeExpandItemsType newValue, int index)
		{
			InsertDomElementAt("", "DesignTimeExpandItems", index, newValue);
		}

		public void ReplaceDesignTimeExpandItemsAt(DesignTimeExpandItemsType newValue, int index)
		{
			ReplaceDomElementAt("", "DesignTimeExpandItems", index, newValue);
		}
		#endregion // DesignTimeExpandItems accessor methods

		#region DesignTimeExpandItems collection
        public DesignTimeExpandItemsCollection	MyDesignTimeExpandItemss = new DesignTimeExpandItemsCollection( );

        public class DesignTimeExpandItemsCollection: IEnumerable
        {
            LevelExpandSchemaType parent;
            public LevelExpandSchemaType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DesignTimeExpandItemsEnumerator GetEnumerator() 
			{
				return new DesignTimeExpandItemsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DesignTimeExpandItemsEnumerator: IEnumerator 
        {
			int nIndex;
			LevelExpandSchemaType parent;
			public DesignTimeExpandItemsEnumerator(LevelExpandSchemaType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DesignTimeExpandItemsCount );
			}
			public DesignTimeExpandItemsType  Current 
			{
				get 
				{
					return(parent.GetDesignTimeExpandItemsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // DesignTimeExpandItems collection

		#region ReportLevelExpands accessor methods
		public int GetReportLevelExpandsMinCount()
		{
			return 1;
		}

		public int ReportLevelExpandsMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetReportLevelExpandsMaxCount()
		{
			return 1;
		}

		public int ReportLevelExpandsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetReportLevelExpandsCount()
		{
			return DomChildCount(NodeType.Element, "", "ReportLevelExpands");
		}

		public int ReportLevelExpandsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ReportLevelExpands");
			}
		}

		public bool HasReportLevelExpands()
		{
			return HasDomChild(NodeType.Element, "", "ReportLevelExpands");
		}

		public ReportLevelExpandsType GetReportLevelExpandsAt(int index)
		{
			return new ReportLevelExpandsType(GetDomChildAt(NodeType.Element, "", "ReportLevelExpands", index));
		}

		public XmlNode GetStartingReportLevelExpandsCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "ReportLevelExpands" );
		}

		public XmlNode GetAdvancedReportLevelExpandsCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "ReportLevelExpands", curNode );
		}

		public ReportLevelExpandsType GetReportLevelExpandsValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new ReportLevelExpandsType( curNode );
		}


		public ReportLevelExpandsType GetReportLevelExpands()
		{
			return GetReportLevelExpandsAt(0);
		}

		public ReportLevelExpandsType ReportLevelExpands
		{
			get
			{
				return GetReportLevelExpandsAt(0);
			}
		}

		public void RemoveReportLevelExpandsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ReportLevelExpands", index);
		}

		public void RemoveReportLevelExpands()
		{
			while (HasReportLevelExpands())
				RemoveReportLevelExpandsAt(0);
		}

		public void AddReportLevelExpands(ReportLevelExpandsType newValue)
		{
			AppendDomElement("", "ReportLevelExpands", newValue);
		}

		public void InsertReportLevelExpandsAt(ReportLevelExpandsType newValue, int index)
		{
			InsertDomElementAt("", "ReportLevelExpands", index, newValue);
		}

		public void ReplaceReportLevelExpandsAt(ReportLevelExpandsType newValue, int index)
		{
			ReplaceDomElementAt("", "ReportLevelExpands", index, newValue);
		}
		#endregion // ReportLevelExpands accessor methods

		#region ReportLevelExpands collection
        public ReportLevelExpandsCollection	MyReportLevelExpandss = new ReportLevelExpandsCollection( );

        public class ReportLevelExpandsCollection: IEnumerable
        {
            LevelExpandSchemaType parent;
            public LevelExpandSchemaType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ReportLevelExpandsEnumerator GetEnumerator() 
			{
				return new ReportLevelExpandsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ReportLevelExpandsEnumerator: IEnumerator 
        {
			int nIndex;
			LevelExpandSchemaType parent;
			public ReportLevelExpandsEnumerator(LevelExpandSchemaType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ReportLevelExpandsCount );
			}
			public ReportLevelExpandsType  Current 
			{
				get 
				{
					return(parent.GetReportLevelExpandsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ReportLevelExpands collection

        private void SetCollectionParents()
        {
            MyDesignTimeExpandItemss.Parent = this; 
            MyReportLevelExpandss.Parent = this; 
	}
}
}
