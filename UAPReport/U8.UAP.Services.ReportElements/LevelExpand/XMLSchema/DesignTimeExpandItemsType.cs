//
// DesignTimeExpandItemsType.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using UFIDA.U8.UAP.Services.ReportElements.Altova.Types;

namespace UFIDA.U8.UAP.Services.ReportElements
{
	public class DesignTimeExpandItemsType : Altova.Xml.Node
	{
		#region Forward constructors
		public DesignTimeExpandItemsType() : base() { SetCollectionParents(); }
		public DesignTimeExpandItemsType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public DesignTimeExpandItemsType(XmlNode node) : base(node) { SetCollectionParents(); }
		public DesignTimeExpandItemsType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "LevelExpandItem"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "LevelExpandItem", i);
				InternalAdjustPrefix(DOMNode, true);
				new LevelExpandItemType(DOMNode).AdjustPrefix();
			}
		}


		#region LevelExpandItem accessor methods
		public int GetLevelExpandItemMinCount()
		{
			return 1;
		}

		public int LevelExpandItemMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevelExpandItemMaxCount()
		{
			return 1;
		}

		public int LevelExpandItemMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevelExpandItemCount()
		{
			return DomChildCount(NodeType.Element, "", "LevelExpandItem");
		}

		public int LevelExpandItemCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LevelExpandItem");
			}
		}

		public bool HasLevelExpandItem()
		{
			return HasDomChild(NodeType.Element, "", "LevelExpandItem");
		}

		public LevelExpandItemType GetLevelExpandItemAt(int index)
		{
			return new LevelExpandItemType(GetDomChildAt(NodeType.Element, "", "LevelExpandItem", index));
		}

		public XmlNode GetStartingLevelExpandItemCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "LevelExpandItem" );
		}

		public XmlNode GetAdvancedLevelExpandItemCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "LevelExpandItem", curNode );
		}

		public LevelExpandItemType GetLevelExpandItemValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new LevelExpandItemType( curNode );
		}


		public LevelExpandItemType GetLevelExpandItem()
		{
			return GetLevelExpandItemAt(0);
		}

		public LevelExpandItemType LevelExpandItem
		{
			get
			{
				return GetLevelExpandItemAt(0);
			}
		}

		public void RemoveLevelExpandItemAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LevelExpandItem", index);
		}

		public void RemoveLevelExpandItem()
		{
			while (HasLevelExpandItem())
				RemoveLevelExpandItemAt(0);
		}

		public void AddLevelExpandItem(LevelExpandItemType newValue)
		{
			AppendDomElement("", "LevelExpandItem", newValue);
		}

		public void InsertLevelExpandItemAt(LevelExpandItemType newValue, int index)
		{
			InsertDomElementAt("", "LevelExpandItem", index, newValue);
		}

		public void ReplaceLevelExpandItemAt(LevelExpandItemType newValue, int index)
		{
			ReplaceDomElementAt("", "LevelExpandItem", index, newValue);
		}
		#endregion // LevelExpandItem accessor methods

		#region LevelExpandItem collection
        public LevelExpandItemCollection	MyLevelExpandItems = new LevelExpandItemCollection( );

        public class LevelExpandItemCollection: IEnumerable
        {
            DesignTimeExpandItemsType parent;
            public DesignTimeExpandItemsType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LevelExpandItemEnumerator GetEnumerator() 
			{
				return new LevelExpandItemEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LevelExpandItemEnumerator: IEnumerator 
        {
			int nIndex;
			DesignTimeExpandItemsType parent;
			public LevelExpandItemEnumerator(DesignTimeExpandItemsType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LevelExpandItemCount );
			}
			public LevelExpandItemType  Current 
			{
				get 
				{
					return(parent.GetLevelExpandItemAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LevelExpandItem collection

        private void SetCollectionParents()
        {
            MyLevelExpandItems.Parent = this; 
	}
}
}
