//
// LevelExpandItemType.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using UFIDA.U8.UAP.Services.ReportElements.Altova.Types;

namespace UFIDA.U8.UAP.Services.ReportElements
{
	public class LevelExpandItemType : Altova.Xml.Node
	{
		#region Forward constructors
		public LevelExpandItemType() : base() { SetCollectionParents(); }
		public LevelExpandItemType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LevelExpandItemType(XmlNode node) : base(node) { SetCollectionParents(); }
		public LevelExpandItemType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "Depth"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "Depth", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "LevelExpandType"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "LevelExpandType", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "ColumnName"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "ColumnName", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region Depth accessor methods
		public int GetDepthMinCount()
		{
			return 0;
		}

		public int DepthMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetDepthMaxCount()
		{
			return 1;
		}

		public int DepthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetDepthCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Depth");
		}

		public int DepthCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Depth");
			}
		}

		public bool HasDepth()
		{
			return HasDomChild(NodeType.Attribute, "", "Depth");
		}

		public SchemaLong GetDepthAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Depth", index)));
		}

		public XmlNode GetStartingDepthCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "Depth" );
		}

		public XmlNode GetAdvancedDepthCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "Depth", curNode );
		}

		public SchemaLong GetDepthValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.Value );
		}


		public SchemaLong GetDepth()
		{
			return GetDepthAt(0);
		}

		public SchemaLong Depth
		{
			get
			{
				return GetDepthAt(0);
			}
		}

		public void RemoveDepthAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Depth", index);
		}

		public void RemoveDepth()
		{
			while (HasDepth())
				RemoveDepthAt(0);
		}

		public void AddDepth(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "Depth", newValue.ToString());
		}

		public void InsertDepthAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "Depth", index, newValue.ToString());
		}

		public void ReplaceDepthAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Depth", index, newValue.ToString());
		}
		#endregion // Depth accessor methods

		#region Depth collection
        public DepthCollection	MyDepths = new DepthCollection( );

        public class DepthCollection: IEnumerable
        {
            LevelExpandItemType parent;
            public LevelExpandItemType Parent
			{
				set
				{
					parent = value;
				}
			}
			public DepthEnumerator GetEnumerator() 
			{
				return new DepthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class DepthEnumerator: IEnumerator 
        {
			int nIndex;
			LevelExpandItemType parent;
			public DepthEnumerator(LevelExpandItemType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.DepthCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetDepthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Depth collection

		#region LevelExpandType accessor methods
		public int GetLevelExpandTypeMinCount()
		{
			return 0;
		}

		public int LevelExpandTypeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetLevelExpandTypeMaxCount()
		{
			return 1;
		}

		public int LevelExpandTypeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLevelExpandTypeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "LevelExpandType");
		}

		public int LevelExpandTypeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "LevelExpandType");
			}
		}

		public bool HasLevelExpandType()
		{
			return HasDomChild(NodeType.Attribute, "", "LevelExpandType");
		}

		public SchemaLong GetLevelExpandTypeAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "LevelExpandType", index)));
		}

		public XmlNode GetStartingLevelExpandTypeCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "LevelExpandType" );
		}

		public XmlNode GetAdvancedLevelExpandTypeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "LevelExpandType", curNode );
		}

		public SchemaLong GetLevelExpandTypeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaLong( curNode.Value );
		}


		public SchemaLong GetLevelExpandType()
		{
			return GetLevelExpandTypeAt(0);
		}

		public SchemaLong LevelExpandType
		{
			get
			{
				return GetLevelExpandTypeAt(0);
			}
		}

		public void RemoveLevelExpandTypeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "LevelExpandType", index);
		}

		public void RemoveLevelExpandType()
		{
			while (HasLevelExpandType())
				RemoveLevelExpandTypeAt(0);
		}

		public void AddLevelExpandType(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "LevelExpandType", newValue.ToString());
		}

		public void InsertLevelExpandTypeAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "LevelExpandType", index, newValue.ToString());
		}

		public void ReplaceLevelExpandTypeAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "LevelExpandType", index, newValue.ToString());
		}
		#endregion // LevelExpandType accessor methods

		#region LevelExpandType collection
        public LevelExpandTypeCollection	MyLevelExpandTypes = new LevelExpandTypeCollection( );

        public class LevelExpandTypeCollection: IEnumerable
        {
            LevelExpandItemType parent;
            public LevelExpandItemType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LevelExpandTypeEnumerator GetEnumerator() 
			{
				return new LevelExpandTypeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LevelExpandTypeEnumerator: IEnumerator 
        {
			int nIndex;
			LevelExpandItemType parent;
			public LevelExpandTypeEnumerator(LevelExpandItemType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LevelExpandTypeCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetLevelExpandTypeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LevelExpandType collection

		#region ColumnName accessor methods
		public int GetColumnNameMinCount()
		{
			return 0;
		}

		public int ColumnNameMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetColumnNameMaxCount()
		{
			return 1;
		}

		public int ColumnNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetColumnNameCount()
		{
			return DomChildCount(NodeType.Attribute, "", "ColumnName");
		}

		public int ColumnNameCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "ColumnName");
			}
		}

		public bool HasColumnName()
		{
			return HasDomChild(NodeType.Attribute, "", "ColumnName");
		}

		public SchemaString GetColumnNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "ColumnName", index)));
		}

		public XmlNode GetStartingColumnNameCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "ColumnName" );
		}

		public XmlNode GetAdvancedColumnNameCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "ColumnName", curNode );
		}

		public SchemaString GetColumnNameValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString GetColumnName()
		{
			return GetColumnNameAt(0);
		}

		public SchemaString ColumnName
		{
			get
			{
				return GetColumnNameAt(0);
			}
		}

		public void RemoveColumnNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "ColumnName", index);
		}

		public void RemoveColumnName()
		{
			while (HasColumnName())
				RemoveColumnNameAt(0);
		}

		public void AddColumnName(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "ColumnName", newValue.ToString());
		}

		public void InsertColumnNameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "ColumnName", index, newValue.ToString());
		}

		public void ReplaceColumnNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "ColumnName", index, newValue.ToString());
		}
		#endregion // ColumnName accessor methods

		#region ColumnName collection
        public ColumnNameCollection	MyColumnNames = new ColumnNameCollection( );

        public class ColumnNameCollection: IEnumerable
        {
            LevelExpandItemType parent;
            public LevelExpandItemType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ColumnNameEnumerator GetEnumerator() 
			{
				return new ColumnNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ColumnNameEnumerator: IEnumerator 
        {
			int nIndex;
			LevelExpandItemType parent;
			public ColumnNameEnumerator(LevelExpandItemType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ColumnNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetColumnNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ColumnName collection

        private void SetCollectionParents()
        {
            MyDepths.Parent = this; 
            MyLevelExpandTypes.Parent = this; 
            MyColumnNames.Parent = this; 
	}
}
}
