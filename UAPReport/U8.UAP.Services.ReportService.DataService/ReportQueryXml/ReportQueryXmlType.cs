//
// ReportQueryXmlType.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using UFIDA.U8.UAP.Services.ReportData.Altova.Types;

namespace UFIDA.U8.UAP.Services.ReportData.ReportQueryXml
{
	public class ReportQueryXmlType : Altova.Xml.Node
	{
		#region Forward constructors
		public ReportQueryXmlType() : base() { SetCollectionParents(); }
		public ReportQueryXmlType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ReportQueryXmlType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ReportQueryXmlType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "Strategy"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "Strategy", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "SqlCmd"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "SqlCmd", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Filter"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Filter", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "StoreProc"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "StoreProc", i);
				InternalAdjustPrefix(DOMNode, true);
				new StoreProcType(DOMNode).AdjustPrefix();
			}
		}


		#region Strategy accessor methods
		public int GetStrategyMinCount()
		{
			return 0;
		}

		public int StrategyMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetStrategyMaxCount()
		{
			return 1;
		}

		public int StrategyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStrategyCount()
		{
			return DomChildCount(NodeType.Attribute, "", "Strategy");
		}

		public int StrategyCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "Strategy");
			}
		}

		public bool HasStrategy()
		{
			return HasDomChild(NodeType.Attribute, "", "Strategy");
		}

		public SchemaString GetStrategyAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "Strategy", index)));
		}

		public XmlNode GetStartingStrategyCursor()
		{
			return GetDomFirstChild( NodeType.Attribute, "", "Strategy" );
		}

		public XmlNode GetAdvancedStrategyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Attribute, "", "Strategy", curNode );
		}

		public SchemaString GetStrategyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.Value );
		}


		public SchemaString GetStrategy()
		{
			return GetStrategyAt(0);
		}

		public SchemaString Strategy
		{
			get
			{
				return GetStrategyAt(0);
			}
		}

		public void RemoveStrategyAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "Strategy", index);
		}

		public void RemoveStrategy()
		{
			while (HasStrategy())
				RemoveStrategyAt(0);
		}

		public void AddStrategy(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "Strategy", newValue.ToString());
		}

		public void InsertStrategyAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "Strategy", index, newValue.ToString());
		}

		public void ReplaceStrategyAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "Strategy", index, newValue.ToString());
		}
		#endregion // Strategy accessor methods

		#region Strategy collection
        public StrategyCollection	MyStrategys = new StrategyCollection( );

        public class StrategyCollection: IEnumerable
        {
            ReportQueryXmlType parent;
            public ReportQueryXmlType Parent
			{
				set
				{
					parent = value;
				}
			}
			public StrategyEnumerator GetEnumerator() 
			{
				return new StrategyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StrategyEnumerator: IEnumerator 
        {
			int nIndex;
			ReportQueryXmlType parent;
			public StrategyEnumerator(ReportQueryXmlType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StrategyCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetStrategyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Strategy collection

		#region SqlCmd accessor methods
		public int GetSqlCmdMinCount()
		{
			return 1;
		}

		public int SqlCmdMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSqlCmdMaxCount()
		{
			return 1;
		}

		public int SqlCmdMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSqlCmdCount()
		{
			return DomChildCount(NodeType.Element, "", "SqlCmd");
		}

		public int SqlCmdCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "SqlCmd");
			}
		}

		public bool HasSqlCmd()
		{
			return HasDomChild(NodeType.Element, "", "SqlCmd");
		}

		public SchemaString GetSqlCmdAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "SqlCmd", index)));
		}

		public XmlNode GetStartingSqlCmdCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "SqlCmd" );
		}

		public XmlNode GetAdvancedSqlCmdCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "SqlCmd", curNode );
		}

		public SchemaString GetSqlCmdValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetSqlCmd()
		{
			return GetSqlCmdAt(0);
		}

		public SchemaString SqlCmd
		{
			get
			{
				return GetSqlCmdAt(0);
			}
		}

		public void RemoveSqlCmdAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "SqlCmd", index);
		}

		public void RemoveSqlCmd()
		{
			while (HasSqlCmd())
				RemoveSqlCmdAt(0);
		}

		public void AddSqlCmd(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "SqlCmd", newValue.ToString());
		}

		public void InsertSqlCmdAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "SqlCmd", index, newValue.ToString());
		}

		public void ReplaceSqlCmdAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "SqlCmd", index, newValue.ToString());
		}
		#endregion // SqlCmd accessor methods

		#region SqlCmd collection
        public SqlCmdCollection	MySqlCmds = new SqlCmdCollection( );

        public class SqlCmdCollection: IEnumerable
        {
            ReportQueryXmlType parent;
            public ReportQueryXmlType Parent
			{
				set
				{
					parent = value;
				}
			}
			public SqlCmdEnumerator GetEnumerator() 
			{
				return new SqlCmdEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SqlCmdEnumerator: IEnumerator 
        {
			int nIndex;
			ReportQueryXmlType parent;
			public SqlCmdEnumerator(ReportQueryXmlType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SqlCmdCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetSqlCmdAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // SqlCmd collection

		#region Filter accessor methods
		public int GetFilterMinCount()
		{
			return 1;
		}

		public int FilterMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFilterMaxCount()
		{
			return 1;
		}

		public int FilterMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFilterCount()
		{
			return DomChildCount(NodeType.Element, "", "Filter");
		}

		public int FilterCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Filter");
			}
		}

		public bool HasFilter()
		{
			return HasDomChild(NodeType.Element, "", "Filter");
		}

		public SchemaString GetFilterAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Filter", index)));
		}

		public XmlNode GetStartingFilterCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Filter" );
		}

		public XmlNode GetAdvancedFilterCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Filter", curNode );
		}

		public SchemaString GetFilterValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetFilter()
		{
			return GetFilterAt(0);
		}

		public SchemaString Filter
		{
			get
			{
				return GetFilterAt(0);
			}
		}

		public void RemoveFilterAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Filter", index);
		}

		public void RemoveFilter()
		{
			while (HasFilter())
				RemoveFilterAt(0);
		}

		public void AddFilter(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "Filter", newValue.ToString());
		}

		public void InsertFilterAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Filter", index, newValue.ToString());
		}

		public void ReplaceFilterAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Filter", index, newValue.ToString());
		}
		#endregion // Filter accessor methods

		#region Filter collection
        public FilterCollection	MyFilters = new FilterCollection( );

        public class FilterCollection: IEnumerable
        {
            ReportQueryXmlType parent;
            public ReportQueryXmlType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FilterEnumerator GetEnumerator() 
			{
				return new FilterEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FilterEnumerator: IEnumerator 
        {
			int nIndex;
			ReportQueryXmlType parent;
			public FilterEnumerator(ReportQueryXmlType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FilterCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetFilterAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Filter collection

		#region StoreProc accessor methods
		public int GetStoreProcMinCount()
		{
			return 1;
		}

		public int StoreProcMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStoreProcMaxCount()
		{
			return 1;
		}

		public int StoreProcMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStoreProcCount()
		{
			return DomChildCount(NodeType.Element, "", "StoreProc");
		}

		public int StoreProcCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "StoreProc");
			}
		}

		public bool HasStoreProc()
		{
			return HasDomChild(NodeType.Element, "", "StoreProc");
		}

		public StoreProcType GetStoreProcAt(int index)
		{
			return new StoreProcType(GetDomChildAt(NodeType.Element, "", "StoreProc", index));
		}

		public XmlNode GetStartingStoreProcCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "StoreProc" );
		}

		public XmlNode GetAdvancedStoreProcCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "StoreProc", curNode );
		}

		public StoreProcType GetStoreProcValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StoreProcType( curNode );
		}


		public StoreProcType GetStoreProc()
		{
			return GetStoreProcAt(0);
		}

		public StoreProcType StoreProc
		{
			get
			{
				return GetStoreProcAt(0);
			}
		}

		public void RemoveStoreProcAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "StoreProc", index);
		}

		public void RemoveStoreProc()
		{
			while (HasStoreProc())
				RemoveStoreProcAt(0);
		}

		public void AddStoreProc(StoreProcType newValue)
		{
			AppendDomElement("", "StoreProc", newValue);
		}

		public void InsertStoreProcAt(StoreProcType newValue, int index)
		{
			InsertDomElementAt("", "StoreProc", index, newValue);
		}

		public void ReplaceStoreProcAt(StoreProcType newValue, int index)
		{
			ReplaceDomElementAt("", "StoreProc", index, newValue);
		}
		#endregion // StoreProc accessor methods

		#region StoreProc collection
        public StoreProcCollection	MyStoreProcs = new StoreProcCollection( );

        public class StoreProcCollection: IEnumerable
        {
            ReportQueryXmlType parent;
            public ReportQueryXmlType Parent
			{
				set
				{
					parent = value;
				}
			}
			public StoreProcEnumerator GetEnumerator() 
			{
				return new StoreProcEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StoreProcEnumerator: IEnumerator 
        {
			int nIndex;
			ReportQueryXmlType parent;
			public StoreProcEnumerator(ReportQueryXmlType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StoreProcCount );
			}
			public StoreProcType  Current 
			{
				get 
				{
					return(parent.GetStoreProcAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // StoreProc collection

        private void SetCollectionParents()
        {
            MyStrategys.Parent = this; 
            MySqlCmds.Parent = this; 
            MyFilters.Parent = this; 
            MyStoreProcs.Parent = this; 
	}
}
}
